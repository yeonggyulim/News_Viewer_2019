{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","lib/usePromise.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","AppTitleBlock","Category","NavLink","Categories","map","c","key","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","async","process","usePromise","query","axios","get","response","articles","data","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ktCAIA,IAAMA,EAAa,CACf,CACIC,KAAM,MACNC,KAAM,4BAEV,CACID,KAAM,WACNC,KAAM,4BAEV,CACID,KAAM,gBACNC,KAAM,wCAEV,CACID,KAAM,SACNC,KAAM,gBAEV,CACID,KAAM,UACNC,KAAM,gBAEV,CACID,KAAM,SACNC,KAAM,sBAEV,CACID,KAAM,aACNC,KAAM,iBAIRC,EAAkBC,IAAOC,IAAV,KAWfC,EAAgBF,IAAOC,IAAV,KAUbE,EAAWH,YAAOI,IAAPJ,CAAH,KA+CCK,EApBI,WACf,OACI,oCACI,kBAACH,EAAD,iBACA,kBAACH,EAAD,KACKH,EAAWU,KAAI,SAAAC,GAAC,OACb,kBAACJ,EAAD,CACIK,IAAKD,EAAEV,KACPY,gBAAgB,SAChBC,MAAkB,QAAXH,EAAEV,KACTc,GAAe,QAAXJ,EAAEV,KAAiB,IAAnB,WAA6BU,EAAEV,OAElCU,EAAET,Y,inBC5F3B,IAAMc,EAAgBZ,IAAOC,IAAV,KAsDJY,EAxBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACRC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,IAAKC,EAAeJ,EAAfI,WAEjC,OACI,kBAACN,EAAD,KACKM,GACG,yBAAKC,UAAU,aACX,uBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAC9B,yBAAKC,IAAKL,EAAYM,IAAI,gBAItC,yBAAKL,UAAU,YACX,4BACI,uBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAC7BP,IAGT,2BAAIC,M,oWC7CpB,IAAMS,EAAgBzB,IAAOC,IAAV,KA+CJyB,EAlCE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,ECjBlB,SAAoBC,EAAgBC,GAAM,MAEvBC,oBAAS,GAFc,mBAE9CC,EAF8C,KAErCC,EAFqC,OAGrBF,mBAAS,MAHY,mBAG9CG,EAH8C,KAGpCC,EAHoC,OAI3BJ,mBAAS,MAJkB,mBAI9CK,EAJ8C,KAIvCC,EAJuC,KAqBrD,OAfAC,qBAAU,YACU,mBAAAC,EAAAC,OAAA,uDACZP,GAAW,GADC,oBAAAM,EAAA,MAGeV,KAHf,OAGFK,EAHE,OAIRC,EAAYD,GAJJ,gDAMRG,EAAS,EAAD,IANA,QAQZJ,GAAW,GARC,wDAUhBQ,KAEDX,GAEI,CAACE,EAASE,EAAUE,GDHQM,EAAW,WAC1C,IAAMC,EAAqB,QAAbf,EAAqB,GAArB,oBAAuCA,GACrD,OAAOgB,IAAMC,IAAN,yDAC+CF,EAD/C,+CAGR,CAACf,IANyB,mBACtBI,EADsB,KACbc,EADa,KACHV,EADG,KAS7B,GAAIJ,EACA,OAAO,kBAACN,EAAD,+BAGX,IAAKoB,EACD,OAAO,KAIX,GAAIV,EACA,OAAO,kBAACV,EAAD,mCAnBkB,IAuBrBqB,EAAaD,EAASE,KAAtBD,SACR,OACI,kBAACrB,EAAD,KACKqB,EAASxC,KAAI,SAAAQ,GAAO,OACjB,kBAAC,EAAD,CAAUN,IAAKM,EAAQG,IAAKH,QAASA,SE/BtCkC,EAXE,SAAC,GAAe,IAEvBrB,EAFsB,EAAZsB,MAEOC,OAAOvB,UAAY,MAC1C,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUA,SAAUA,MCFjBwB,EAJH,WACV,OAAO,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWL,KCO1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCXNS,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8534bd6.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst categories = [\n    {\n        name: 'all',\n        text: '전체보기'\n    },\n    {\n        name: 'business',\n        text: '비즈니스'\n    },\n    {\n        name: 'entertainment',\n        text: '엔터테인먼트'\n    },\n    {\n        name: 'health',\n        text: '건강'\n    },\n    {\n        name: 'science',\n        text: '과학'\n    },\n    {\n        name: 'sports',\n        text: '스포츠'\n    },\n    {\n        name: 'technology',\n        text: '기술'\n    }\n];\n\nconst CategoriesBlock = styled.div`\n    display: flex;\n    padding: 1rem;\n    width: 768px;\n    margin: 0 auto;\n    @media screen and (max-width: 768px) {\n        width: 100%;\n        overflow-x: auto;\n    }\n`;\n\nconst AppTitleBlock = styled.div`\n    background: #20b6cd;\n    color: white;\n    height: 4rem;\n    font-size: 1.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Category = styled(NavLink)`\n    font-size: 1.125rem;\n    cursor: pointer;\n    white-space: pre;\n    text-decoration: none;\n    color: inherit;\n    padding-bottom: 0.25rem;\n    \n    &:hover {\n        color: #495057;\n    }\n\n    &.active {\n        font-weight: 600;\n        border-bottom: 2px solid #22b8cf;\n        color: #20b6cd;\n        &:hover {\n            color: #3bc9db;\n        }\n    }\n\n    & + & {\n        margin-left: 1rem;\n    }\n`;\n\n\nconst Categories = () => {\n    return (\n        <>\n            <AppTitleBlock>News App</AppTitleBlock>\n            <CategoriesBlock>\n                {categories.map(c => (\n                    <Category \n                        key={c.name}\n                        activeClassName='active'\n                        exact={c.name === 'all'}\n                        to={c.name === 'all' ? '/' : `/${c.name}`}\n                    >\n                        {c.text}\n                    </Category>\n                ))}\n            </CategoriesBlock>\n        </>\n    );\n};\n\nexport default Categories;","import React from 'react';\nimport styled from 'styled-components';\n\nconst NewsItemBlock = styled.div`\n    display: flex;\n    .thumbnail {\n        margin-right: 1rem;\n        img {\n            display: block;\n            width: 160px;\n            height: 100px;\n            object-fit: cover;\n        }\n    }\n    .contents {\n        h2 {\n            margin: 0;\n            a {\n                color: black;\n            }\n        }\n        p {\n            margin: 0;\n            line-height: 1.5;\n            margin-top: 0.5rem;\n            white-space: normal;\n        }\n    }\n    & + &  {\n        margin-top: 3rem;\n    }\n`;\n\nconst NewsItem = ({ article }) => {\n    const { title, description, url, urlToImage } = article;\n\n    return (\n        <NewsItemBlock>\n            {urlToImage && (\n                <div className='thumbnail'>\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <img src={urlToImage} alt='thumbnail' />\n                    </a>\n                </div>\n            )}\n            <div className='contents'>\n                <h2>\n                    <a href={url} target='_blank' rel='noopener noreferrer'>\n                        {title}\n                    </a>\n                </h2>\n                <p>{description}</p>\n            </div>\n        </NewsItemBlock>\n    );\n};\n\nexport default NewsItem;","import React from 'react';\nimport styled from 'styled-components';\nimport NewsItem from './NewsItem';\nimport axios from 'axios';\nimport usePromise from '../lib/usePromise';\n\nconst NewsListBlock = styled.div`\n    box-sizing: border-box;\n    padding-bottom: 3rem;\n    width: 768px;\n    margin: 0 auto;\n    margin-top: 2rem;\n    @media screen and (max-width: 768px) {\n        width: 100%;\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n`;\n\nconst NewsList = ({category}) => {\n    const [loading, response, error] = usePromise(() => {\n        const query = category === 'all' ? '' : `&category=${category}`;\n        return axios.get(\n            `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=3f62e272920947c3b4fee20cb22cee7a`,\n        );\n    }, [category]);\n\n    // 대기 중일 때\n    if (loading) {\n        return <NewsListBlock>대기 중...</NewsListBlock>;\n    }\n    // 아직 response 값이 설정되지 않았을 때\n    if (!response) {\n        return null;\n    }\n\n    // 에러가 발생했을 때\n    if (error) {\n        return <NewsListBlock>에러 발생!</NewsListBlock>;\n    }\n\n    // response 값이 유효할 때\n    const { articles } = response.data;\n    return (\n        <NewsListBlock>\n            {articles.map(article => (\n                <NewsItem key={article.url} article={article} />\n            ))}\n        </NewsListBlock>\n    \n    );\n};\n\nexport default NewsList;","import { useState, useEffect } from 'react';\n\nexport default function usePromise(promiseCreator, deps) {\n    // 대기 중/완료/실패에 대한 상태 관리\n    const [loading, setLoading] = useState(false);\n    const [resolved, setResolved] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const process = async () => {\n            setLoading(true);\n            try {\n                const resolved = await promiseCreator();\n                setResolved(resolved);\n            } catch (e) {\n                setError(e);\n            }\n            setLoading(false);\n        };\n        process();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n\n    return [loading, resolved, error];\n}","import React from 'react';\nimport Categories from '../components/Categories';\nimport NewsList from '../components/NewsList';\n\nconst NewsPage = ({ match }) => {\n    // 카테고리가 선택되지 않았으면 기본값 all로 사용\n    const category = match.params.category || 'all';\n    return (\n        <>\n            <Categories />\n            <NewsList category={category} />\n        </>\n    );\n};\n\nexport default NewsPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = () => {\n  return <Route path='/:category?' component={NewsPage} />;\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}