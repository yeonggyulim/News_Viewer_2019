{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","lib/usePromise.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Category","NavLink","Categories","map","c","key","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","async","process","usePromise","query","axios","get","response","articles","data","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.014dc511.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst categories = [\r\n    {\r\n        name: 'all',\r\n        text: '전체보기'\r\n    },\r\n    {\r\n        name: 'business',\r\n        text: '비즈니스'\r\n    },\r\n    {\r\n        name: 'entertainment',\r\n        text: '엔터테인먼트'\r\n    },\r\n    {\r\n        name: 'health',\r\n        text: '건강'\r\n    },\r\n    {\r\n        name: 'science',\r\n        text: '과학'\r\n    },\r\n    {\r\n        name: 'sports',\r\n        text: '스포츠'\r\n    },\r\n    {\r\n        name: 'technology',\r\n        text: '기술'\r\n    }\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n    display: flex;\r\n    padding: 1rem;\r\n    width: 768px;\r\n    margin: 0 auto;\r\n    @media screen and (max-width: 768px) {\r\n        width: 100%;\r\n        overflow-x: auto;\r\n    }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n    font-size: 1.125rem;\r\n    cursor: pointer;\r\n    white-space: pre;\r\n    text-decoration: none;\r\n    color: inherit;\r\n    padding-bottom: 0.25rem;\r\n    \r\n    &:hover {\r\n        color: #495057;\r\n    }\r\n\r\n    &.active {\r\n        font-weight: 600;\r\n        border-bottom: 2px solid #22b8cf;\r\n        color: #22b8cf;\r\n        &:hover {\r\n            color: #3bc9db;\r\n        }\r\n    }\r\n\r\n    & + & {\r\n        margin-left: 1rem;\r\n    }\r\n`;\r\n\r\n\r\nconst Categories = () => {\r\n    return (\r\n        <CategoriesBlock>\r\n            {categories.map(c => (\r\n                <Category \r\n                    key={c.name}\r\n                    activeClassName='active'\r\n                    exact={c.name === 'all'}\r\n                    to={c.name === 'all' ? '/' : `/${c.name}`}\r\n                >\r\n                    {c.text}\r\n                </Category>\r\n            ))}\r\n        </CategoriesBlock>\r\n    );\r\n};\r\n\r\nexport default Categories;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NewsItemBlock = styled.div`\r\n    display: flex;\r\n    .thumbnail {\r\n        margin-right: 1rem;\r\n        img {\r\n            display: block;\r\n            width: 160px;\r\n            height: 100px;\r\n            object-fit: cover;\r\n        }\r\n    }\r\n    .contents {\r\n        h2 {\r\n            margin: 0;\r\n            a {\r\n                color: black;\r\n            }\r\n        }\r\n        p {\r\n            margin: 0;\r\n            line-height: 1.5;\r\n            margin-top: 0.5rem;\r\n            white-space: normal;\r\n        }\r\n    }\r\n    & + &  {\r\n        margin-top: 3rem;\r\n    }\r\n`;\r\n\r\nconst NewsItem = ({ article }) => {\r\n    const { title, description, url, urlToImage } = article;\r\n\r\n    return (\r\n        <NewsItemBlock>\r\n            {urlToImage && (\r\n                <div className='thumbnail'>\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src={urlToImage} alt='thumbnail' />\r\n                    </a>\r\n                </div>\r\n            )}\r\n            <div className='contents'>\r\n                <h2>\r\n                    <a href={url} target='_blank' rel='noopener noreferrer'>\r\n                        {title}\r\n                    </a>\r\n                </h2>\r\n                <p>{description}</p>\r\n            </div>\r\n        </NewsItemBlock>\r\n    );\r\n};\r\n\r\nexport default NewsItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NewsItem from './NewsItem';\r\nimport axios from 'axios';\r\nimport usePromise from '../lib/usePromise';\r\n\r\nconst NewsListBlock = styled.div`\r\n    box-sizing: border-box;\r\n    padding-bottom: 3rem;\r\n    width: 768px;\r\n    margin: 0 auto;\r\n    margin-top: 2rem;\r\n    @media screen and (max-width: 768px) {\r\n        width: 100%;\r\n        padding-left: 1rem;\r\n        padding-right: 1rem;\r\n    }\r\n`;\r\n\r\nconst NewsList = ({category}) => {\r\n    const [loading, response, error] = usePromise(() => {\r\n        const query = category === 'all' ? '' : `&category=${category}`;\r\n        return axios.get(\r\n            `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=3f62e272920947c3b4fee20cb22cee7a`,\r\n        );\r\n    }, [category]);\r\n\r\n    // 대기 중일 때\r\n    if (loading) {\r\n        return <NewsListBlock>대기 중...</NewsListBlock>;\r\n    }\r\n    // 아직 response 값이 설정되지 않았을 때\r\n    if (!response) {\r\n        return null;\r\n    }\r\n\r\n    // 에러가 발생했을 때\r\n    if (error) {\r\n        return <NewsListBlock>에러 발생!</NewsListBlock>;\r\n    }\r\n\r\n    // response 값이 유효할 때\r\n    const { articles } = response.data;\r\n    return (\r\n        <NewsListBlock>\r\n            {articles.map(article => (\r\n                <NewsItem key={article.url} article={article} />\r\n            ))}\r\n        </NewsListBlock>\r\n    \r\n    );\r\n};\r\n\r\nexport default NewsList;","import { useState, useEffect } from 'react';\r\n\r\nexport default function usePromise(promiseCreator, deps) {\r\n    // 대기 중/완료/실패에 대한 상태 관리\r\n    const [loading, setLoading] = useState(false);\r\n    const [resolved, setResolved] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const process = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const resolved = await promiseCreator();\r\n                setResolved(resolved);\r\n            } catch (e) {\r\n                setError(e);\r\n            }\r\n            setLoading(false);\r\n        };\r\n        process();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, deps);\r\n\r\n    return [loading, resolved, error];\r\n}","import React from 'react';\r\nimport Categories from '../components/Categories';\r\nimport NewsList from '../components/NewsList';\r\n\r\nconst NewsPage = ({ match }) => {\r\n    // 카테고리가 선택되지 않았으면 기본값 all로 사용\r\n    const category = match.params.category || 'all';\r\n    return (\r\n        <>\r\n            <Categories />\r\n            <NewsList category={category} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewsPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = () => {\n  return <Route path='/:category?' component={NewsPage} />;\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}